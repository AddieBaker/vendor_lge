#!/bin/sh
set -e
cd $(dirname $0)

# Kick off with generic configuration

VENDOR=lge
DEVICE=mako

# Follow up with even more generic configuration

VENDOR_MAKEFILE=$DEVICE-vendor.mk
BLOBS_MAKEFILE=$DEVICE-vendor-blobs.mk

# All hail the common header

HEADER="# Copyright (C) 2015 ParanoidAndroid Project
#
# Licensed under the Apache License, Version 2.0 (the \"License\");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an \"AS IS\" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file was automatically generated by vendor/$VENDOR/$DEVICE/extract.sh"

# Look up the proprietary-blobs.txt file to use

if [ -f proprietary-blobs.txt ]; then
  BLOBS_TXT=proprietary-blobs.txt
elif [ -f ../../../device/$VENDOR/$DEVICE/proprietary-blobs.txt ]; then
  BLOBS_TXT=../../../device/$VENDOR/$DEVICE/proprietary-blobs.txt
else
  echo ""
  echo "    $0: missing proprietary-blobs.txt"
  echo ""
  echo "    A proprietary-blobs.txt file was expected either in the"
  echo "    current working directory or in the regular device tree"
  echo "    (device/$VENDOR/$DEVICE/) but could not be found."
  echo ""
  exit 1
fi

# Check on what the source should be set to

if [ $# -eq 0 ]; then
  SOURCE=adb
elif [ $# -eq 1 ]; then
  SOURCE=$1
else
  echo ""
  echo "    $0: unexpected arguments specified"
  echo ""
  echo "    usage: $0 [path-to-root]"
  echo ""
  echo "    If the path-to-root argument gets specified, it should be the"
  echo "    absolute path to the root of the extracted device's image. If"
  echo "    not specified, it is set as adb instead, denoting that the"
  echo "    connected device will be the source of the files."
  echo ""
  exit 2
fi

# Output the setup just for verbosity

echo "# VENDOR=$VENDOR"
echo "# DEVICE=$DEVICE"
echo "# VENDOR_MAKEFILE=$VENDOR_MAKEFILE"
echo "# BLOBS_MAKEFILE=$BLOBS_MAKEFILE"
echo "# BLOBS_TXT=$BLOBS_TXT"
echo "# SOURCE=$SOURCE"
echo ""

# Stop preparing and start by removing all old files

echo "Making old files disappear..."
rm -rf proprietary/*

# Do the real pulling and copying of files

echo "Making new files appear..."
for FILE in $(cat $BLOBS_TXT | grep -v -E '^ *(#|$)'); do
    # Ensure we have a target directory
    FILE_DIR=$(dirname $FILE)
    if [ ! -d proprietary$FILE_DIR ]; then
        mkdir -p proprietary$FILE_DIR
    fi

    # Pull and copy!
    if [ "$SOURCE" = "adb" ]; then
      adb pull -p -a $FILE proprietary$FILE
    else
      cp $SOURCE$FILE proprietary$FILE
    fi
done

# Inform the user of the good status

echo "Done with moving files. Setting up makefiles..."

# Truncate the blobs makefile and put a header in it

(cat << EOF) > $BLOBS_MAKEFILE
$HEADER

PRODUCT_COPY_FILES += \\
EOF

# Output some information about what files we expect to have

COUNT=$(cat $BLOBS_TXT | grep -v -E '^ *(#|$)' | wc -l) # Provide a nice counter
LINE_END=" \\" # Provide a nice line ending
for FILE in $(cat $BLOBS_TXT | grep -v -E '^ *(#|$)'); do
    # Check if we have reached the last line
    COUNT=$((COUNT - 1))
    if [ $COUNT = "0" ]; then
        LINE_END=""
    fi

    # Do all the outputs
    echo "    vendor/$VENDOR/$DEVICE/proprietary$FILE:system$FILE$LINE_END" >> $BLOBS_MAKEFILE
done

# And finish up with a clean, generic makefile

(cat << EOF) > $VENDOR_MAKEFILE
$HEADER

# An overlay for features that depend on proprietary files
DEVICE_PACKAGE_OVERLAYS := vendor/$VENDOR/$DEVICE/overlay

\$(call inherit-product, vendor/$VENDOR/$DEVICE/$DEVICE-vendor-blobs.mk)
EOF

# Let the user know we performed well and finished nicely

echo "Done with setting up makefiles."
